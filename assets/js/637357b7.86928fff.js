"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[338],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>k,useMDXComponents:()=>m,withMDXComponents:()=>u});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=r.createContext({}),u=function(e){return function(n){var t=m(n.components);return r.createElement(e,a({},n,{components:t}))}},m=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=m(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=m(t),d=l,p=u["".concat(o,".").concat(d)]||u[d]||f[d]||a;return t?r.createElement(p,i(i({ref:n},c),{},{components:t})):r.createElement(p,i({ref:n},c))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,o=new Array(a);o[0]=b;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},50849:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(87462),l=(t(67294),t(3905));const a={id:"kill",title:"kill"},o=void 0,i={unversionedId:"users/commands/kill",id:"users/commands/kill",title:"kill",description:"These are the flags/commands under buck2 kill and their --help output:",source:"@site/../docs/users/commands/kill.generated.md",sourceDirName:"users/commands",slug:"/users/commands/kill",permalink:"/docs/users/commands/kill",draft:!1,tags:[],version:"current",frontMatter:{id:"kill",title:"kill"},sidebar:"manualSidebar",previous:{title:"install",permalink:"/docs/users/commands/install"},next:{title:"killall",permalink:"/docs/users/commands/killall"}},s={},c=[{value:"buck kill",id:"buck-kill",level:2}],u={toc:c};function m(e){let{components:n,...t}=e;return(0,l.mdx)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"These are the flags/commands under ",(0,l.mdx)("inlineCode",{parentName:"p"},"buck2 kill")," and their ",(0,l.mdx)("inlineCode",{parentName:"p"},"--help")," output:"),(0,l.mdx)("h2",{id:"buck-kill"},"buck kill"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-kill \nKill the buck daemon.\n\nNote there's also `buck2 killall` and `buck2 clean`.\n\n`buck2 killall` kills all the buck2 processes on the machine.\n\n`buck2 clean` kills the buck2 daemon and also deletes the buck2 state files.\n\nUSAGE:\n    buck2-release kill [OPTIONS]\n\nOPTIONS:\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")))}m.isMDXComponent=!0}}]);