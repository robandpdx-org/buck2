"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5983],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>p,useMDXComponents:()=>d,withMDXComponents:()=>u});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},r.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),u=function(e){return function(n){var t=d(n.components);return o.createElement(e,r({},n,{components:t}))}},d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},f="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,f=u["".concat(s,".").concat(m)]||u[m]||b[m]||r;return t?o.createElement(f,i(i({ref:n},c),{},{components:t})):o.createElement(f,i({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[f]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},60198:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const r={id:"docs",title:"docs"},s=void 0,i={unversionedId:"users/commands/docs",id:"users/commands/docs",title:"docs",description:"These are the flags/commands under buck2 docs and their --help output:",source:"@site/../docs/users/commands/docs.generated.md",sourceDirName:"users/commands",slug:"/users/commands/docs",permalink:"/docs/users/commands/docs",draft:!1,tags:[],version:"current",frontMatter:{id:"docs",title:"docs"},sidebar:"manualSidebar",previous:{title:"ctargets",permalink:"/docs/users/commands/ctargets"},next:{title:"help-env",permalink:"/docs/users/commands/help-env"}},l={},c=[{value:"buck docs",id:"buck-docs",level:2},{value:"buck docs aquery",id:"buck-docs-aquery",level:3},{value:"buck docs cquery",id:"buck-docs-cquery",level:3},{value:"buck docs query",id:"buck-docs-query",level:3},{value:"buck docs starlark",id:"buck-docs-starlark",level:3},{value:"buck docs uquery",id:"buck-docs-uquery",level:3}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"These are the flags/commands under ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 docs")," and their ",(0,a.mdx)("inlineCode",{parentName:"p"},"--help")," output:"),(0,a.mdx)("h2",{id:"buck-docs"},"buck docs"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'buck2-release-docs \nPrint documentation of specified symbols\n\nUSAGE:\n    buck2-release docs [OPTIONS] <SUBCOMMAND>\n\nOPTIONS:\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2\'s logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            "-v=1,stderr"\n            \n            [default: 1]\n\nSUBCOMMANDS:\n    aquery\n            Print documentation for aquery\n    cquery\n            Print documentation for cquery\n    help\n            Print this message or the help of the given subcommand(s)\n    query\n            Print documentation for uquery\n    starlark\n            Print documentation of user-defined starlark symbols\n    uquery\n            Print documentation for uquery\n\n')),(0,a.mdx)("h3",{id:"buck-docs-aquery"},"buck docs aquery"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'buck2-release-docs-aquery \nPrint documentation for aquery\n\nUSAGE:\n    buck2-release docs aquery [OPTIONS]\n\nOPTIONS:\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2\'s logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --format <FORMAT>\n            How to format the documentation\n            \n            [default: rendered]\n            [possible values: markdown, rendered]\n\n    -h, --help\n            Print help information\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            "-v=1,stderr"\n            \n            [default: 1]\n\n')),(0,a.mdx)("h3",{id:"buck-docs-cquery"},"buck docs cquery"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'buck2-release-docs-cquery \nPrint documentation for cquery\n\nUSAGE:\n    buck2-release docs cquery [OPTIONS]\n\nOPTIONS:\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2\'s logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --format <FORMAT>\n            How to format the documentation\n            \n            [default: rendered]\n            [possible values: markdown, rendered]\n\n    -h, --help\n            Print help information\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            "-v=1,stderr"\n            \n            [default: 1]\n\n')),(0,a.mdx)("h3",{id:"buck-docs-query"},"buck docs query"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'buck2-release-docs-query \nPrint documentation for uquery\n\nUSAGE:\n    buck2-release docs query [OPTIONS]\n\nOPTIONS:\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2\'s logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --format <FORMAT>\n            How to format the documentation\n            \n            [default: rendered]\n            [possible values: markdown, rendered]\n\n    -h, --help\n            Print help information\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            "-v=1,stderr"\n            \n            [default: 1]\n\n')),(0,a.mdx)("h3",{id:"buck-docs-starlark"},"buck docs starlark"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-docs-starlark \nPrint documentation of user-defined starlark symbols\n\nUSAGE:\n    buck2-release docs starlark [OPTIONS] [--] [SYMBOL_PATTERNS]...\n\nARGS:\n    <SYMBOL_PATTERNS>...\n            Patterns to interpret. //foo:bar.bzl is 'every symbol in //foo:bar.bzl',\n            //foo:bar.bzl:baz only returns the documentation for the symbol 'baz' in //foo:bar.bzl\n\nOPTIONS:\n        --builtins\n            get documentation for built in functions, rules, and providers\n\n    -c, --config <SECTION.OPTION=VALUE>\n            List of config options\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --config-file <PATH>\n            List of config file paths\n\n        --console <super|simple|...>\n            Which console to use for this command\n            \n            [env: BUCK_CONSOLE=]\n            [default: auto]\n            [possible values: simple, simplenotty, simpletty, super, auto, none]\n\n        --disable-starlark-types\n            Disable runtime type checking in Starlark interpreter.\n            \n            This option is not stable, and can be used only locally to diagnose evaluation\n            performance problems.\n\n        --event-log <PATH>\n            Write events to this log file\n\n        --exit-when-different-state\n            Used for exiting a concurrent command when a different state is detected\n\n        --fake-arch <ARCH>\n            [possible values: default, aarch64, x8664]\n\n        --fake-host <HOST>\n            [possible values: default, linux, macos, windows]\n\n        --fake-xcode-version <VERSION-BUILD>\n            Value must be formatted as: version-build (e.g., 14.3.0-14C18 or 14.1-14B47b)\n\n        --format <FORMAT>\n            how to format the returned documentation\n            \n            [default: json]\n            [possible values: json, markdown_files]\n\n    -h, --help\n            Print help information\n\n    -m, --modifier <VALUE>\n            A configuration modifier to configure all targets on the command line. This may be a\n            constraint value target.\n\n        --markdown-files-destination-dir <DESTINATION_DIR>\n            \n\n        --markdown-files-native-subdir <NATIVE_SUBDIR>\n            [default: native]\n\n        --markdown-files-starlark-subdir <STARLARK_SUBDIR>\n            [default: starlark]\n\n        --no-interactive-console\n            Disable console interactions\n            \n            [env: BUCK_NO_INTERACTIVE_CONSOLE=]\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --prelude\n            get documentation for the prelude, if present\n\n        --reuse-current-config\n            Re-uses any `--config` values (inline or via modefiles) if there's a previous command,\n            otherwise the flag is ignored.\n            \n            If there is a previous command and `--reuse-current-config` is set, then the old config\n            is used, ignoring any overrides.\n            \n            If there is no previous command but the flag was set, then the flag is ignored, the\n            command behaves as if the flag was not set at all.\n\n        --skip-targets-with-duplicate-names\n            If there are targets with duplicate names in `BUCK` file, skip all the duplicates but\n            the first one. This is a hack for TD. Do not use this option\n\n        --stack\n            Record or show target call stacks.\n            \n            Starlark call stacks will be included in duplicate targets error.\n            \n            If a command outputs targets (like `targets` command), starlark call stacks will be\n            printed after the targets.\n\n        --target-platforms <PLATFORM>\n            Configuration target (one) to use to configure targets\n\n        --ui <UI>\n            Configure additional superconsole ui components.\n            \n            Accepts a comma-separated list of superconsole components to add. Possible values are:\n            \n            dice - shows information about evaluated dice nodes debugevents - shows information\n            about the flow of events from buckd\n            \n            These components can be turned on/off interactively. Press 'h' for help when\n            superconsole is active.\n            \n            [possible values: dice, debugevents, io, re]\n\n        --unstable-write-invocation-record <PATH>\n            Write the invocation record (as JSON) to this path. No guarantees whatsoever are made\n            regarding the stability of the format\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n        --write-build-id <PATH>\n            Write command invocation id into this file\n\n")),(0,a.mdx)("h3",{id:"buck-docs-uquery"},"buck docs uquery"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'buck2-release-docs-uquery \nPrint documentation for uquery\n\nUSAGE:\n    buck2-release docs uquery [OPTIONS]\n\nOPTIONS:\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2\'s logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --format <FORMAT>\n            How to format the documentation\n            \n            [default: rendered]\n            [possible values: markdown, rendered]\n\n    -h, --help\n            Print help information\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            "-v=1,stderr"\n            \n            [default: 1]\n\n')))}d.isMDXComponent=!0}}]);