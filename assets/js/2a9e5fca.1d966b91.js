"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3955],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>p,useMDXComponents:()=>d,withMDXComponents:()=>u});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},l.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),u=function(e){return function(n){var t=d(n.components);return o.createElement(e,l({},n,{components:t}))}},d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},h="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,h=u["".concat(i,".").concat(m)]||u[m]||f[m]||l;return t?o.createElement(h,r(r({ref:n},c),{},{components:t})):o.createElement(h,r({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=g;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[h]="string"==typeof e?e:a,i[1]=r;for(var c=2;c<l;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},66225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const l={id:"log",title:"log"},i=void 0,r={unversionedId:"users/commands/log",id:"users/commands/log",title:"log",description:"These are the flags/commands under buck2 log and their --help output:",source:"@site/../docs/users/commands/log.generated.md",sourceDirName:"users/commands",slug:"/users/commands/log",permalink:"/docs/users/commands/log",draft:!1,tags:[],version:"current",frontMatter:{id:"log",title:"log"},sidebar:"manualSidebar",previous:{title:"killall",permalink:"/docs/users/commands/killall"},next:{title:"lsp",permalink:"/docs/users/commands/lsp"}},s={},c=[{value:"buck log",id:"buck-log",level:2},{value:"buck log cmd",id:"buck-log-cmd",level:3},{value:"buck log critical-path",id:"buck-log-critical-path",level:3},{value:"buck log path",id:"buck-log-path",level:3},{value:"buck log replay",id:"buck-log-replay",level:3},{value:"buck log show",id:"buck-log-show",level:3},{value:"buck log show-user",id:"buck-log-show-user",level:3},{value:"buck log summary",id:"buck-log-summary",level:3},{value:"buck log what-failed",id:"buck-log-what-failed",level:3},{value:"buck log what-materialized",id:"buck-log-what-materialized",level:3},{value:"buck log what-ran",id:"buck-log-what-ran",level:3},{value:"buck log what-up",id:"buck-log-what-up",level:3},{value:"buck log what-uploaded",id:"buck-log-what-uploaded",level:3}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"These are the flags/commands under ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 log")," and their ",(0,a.mdx)("inlineCode",{parentName:"p"},"--help")," output:"),(0,a.mdx)("h2",{id:"buck-log"},"buck log"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'buck2-release-log \nCommands for interacting with buck2 logs\n\nUSAGE:\n    buck2-release log [OPTIONS] <SUBCOMMAND>\n\nOPTIONS:\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2\'s logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            "-v=1,stderr"\n            \n            [default: 1]\n\nSUBCOMMANDS:\n    cmd\n            Show buck command line arguments from selected invocation\n    critical-path\n            Show the critical path for a selected build\n    help\n            Print this message or the help of the given subcommand(s)\n    path\n            Output the path to the selected log\n    replay\n            Replay an event log\n    show\n            Outputs the log in JSON format from selected invocation\n    show-user\n            Converts the event log from a selected invocation into a user event log, in JSONL format\n    summary\n            Outputs high level statistics about the build\n    what-failed\n            Outputs every command that failed in the selected invocation\n    what-materialized\n            Outputs materializations from selected invocation\n    what-ran\n            Output everything Buck2 ran from selected invocation\n    what-up\n            Show the spans that were open when the log ended\n    what-uploaded\n            Outputs stats about uploads to RE from the selected invocation\n\n')),(0,a.mdx)("h3",{id:"buck-log-cmd"},"buck log cmd"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-cmd \nShow buck command line arguments from selected invocation.\n\nThis command output is not machine readable. Robots, please use `buck2 log show`.\n\nUSAGE:\n    buck2-release log cmd [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --expand\n            Show @-expanded command line arguments instead of the original command line\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-critical-path"},"buck log critical-path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-critical-path \nShow the critical path for a selected build.\n\nThis produces tab-delimited output listing every node on the critical path.\n\nIt includes the kind of node, its name, category and identfier, as well as total duration (runtime\nof this node), user duration (duration the user can improve) and potential improvement before this\nnode stops being on the critical path.\n\nAll durations are in microseconds.\n\nUSAGE:\n    buck2-release log critical-path [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-path"},"buck log path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-path \nOutput the path to the selected log\n\nUSAGE:\n    buck2-release log path [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --all\n            List all the logs\n\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-replay"},"buck log replay"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-replay \nReplay an event log.\n\nThis command allows visualizing an existing event log in a Superconsole.\n\nUSAGE:\n    buck2-release log replay [OPTIONS] [--] [ARGS]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\n    <OVERRIDE_ARGS>...\n            Override the arguments\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --console <super|simple|...>\n            Which console to use for this command\n            \n            [env: BUCK_CONSOLE=]\n            [default: auto]\n            [possible values: simple, simplenotty, simpletty, super, auto, none]\n\n    -h, --help\n            Print help information\n\n        --no-interactive-console\n            Disable console interactions\n            \n            [env: BUCK_NO_INTERACTIVE_CONSOLE=]\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --preload\n            Preload the event log. This is typically only useful for benchmarking\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --speed <NUMBER>\n            Control the playback speed using a float (i.e. 0.5, 2, etc)\n\n        --trace-id <ID>\n            Show log by trace id\n\n        --ui <UI>\n            Configure additional superconsole ui components.\n            \n            Accepts a comma-separated list of superconsole components to add. Possible values are:\n            \n            dice - shows information about evaluated dice nodes debugevents - shows information\n            about the flow of events from buckd\n            \n            These components can be turned on/off interactively. Press 'h' for help when\n            superconsole is active.\n            \n            [possible values: dice, debugevents, io, re]\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-show"},"buck log show"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-show \nOutputs the log in JSON format from selected invocation\n\nUSAGE:\n    buck2-release log show [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-show-user"},"buck log show-user"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-show-user \nConverts the event log from a selected invocation into a user event log, in JSONL format\n\nUSAGE:\n    buck2-release log show-user [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-summary"},"buck log summary"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-summary \nOutputs high level statistics about the build\n\nUSAGE:\n    buck2-release log summary [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-failed"},"buck log what-failed"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-what-failed \nOutputs every command that failed in the selected invocation.\n\nLook at the help for what-ran to understand the output format.\n\nUSAGE:\n    buck2-release log what-failed [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --emit-cache-queries\n            \n\n        --filter-category <FILTER_CATEGORY>\n            Regular expression to filter commands by given action category (i.e. type of of actions\n            that are similar but operate on different inputs, such as invocations of a C++ compiler\n            (whose category would be `cxx_compile`)). Matches by full string\n\n        --format <OUTPUT>\n            Which output format to use for this command\n            \n            [default: tabulated]\n            [possible values: tabulated, json, csv]\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --skip-cache-hits\n            \n\n        --skip-local-executions\n            \n\n        --skip-remote-executions\n            \n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-materialized"},"buck log what-materialized"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-what-materialized \nOutputs materializations from selected invocation.\n\nThe output is a tab-separated list containing the path, the materialization method, the file count,\nand the total size (after decompression).\n\nUSAGE:\n    buck2-release log what-materialized [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --aggregate-by-ext\n            Aggregates the output by file extension\n\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --format <OUTPUT>\n            Which output format to use for this command\n            \n            [default: tabulated]\n            [possible values: tabulated, json, csv]\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n    -s, --sort-by-size\n            Sort the output by total bytes in ascending order\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-ran"},"buck log what-ran"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'buck2-release-log-what-ran \nOutput everything Buck2 ran from selected invocation.\n\nThe output is presented as a series of tab-delimited records with the following structure:\n\nThe reason for executing a given command. That\'s either to build or to test.\n\nThe identity of this command. This will include the target that ran required it.\n\nThe executor for this command. This will either be RE or local.\n\nDetails to reproduce it. For RE, that\'s the action digest. For local, the command.\n\nTo reproduce an action that ran on RE, use the following command then follow the instructions. The\nDIGEST is of the form `hash:size`.\n\nfrecli cas download-action DIGEST\n\nTo reproduce an action that ran locally, make sure your working directory is the project root (if\nunsure, use `buck2 root --kind project` to find it), then run the command. The command is already\nshell-quoted.\n\nUSAGE:\n    buck2-release log what-ran [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2\'s logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --emit-cache-queries\n            \n\n        --failed\n            Show only commands that failed\n\n        --filter-category <FILTER_CATEGORY>\n            Regular expression to filter commands by given action category (i.e. type of of actions\n            that are similar but operate on different inputs, such as invocations of a C++ compiler\n            (whose category would be `cxx_compile`)). Matches by full string\n\n        --format <OUTPUT>\n            Which output format to use for this command\n            \n            [default: tabulated]\n            [possible values: tabulated, json, csv]\n\n    -h, --help\n            Print help information\n\n        --incomplete\n            Show only commands that were not completed. That is command were running if buck2\n            process was killed, or command currently running if buck2 is running build now\n\n        --no-remote\n            Do not allow downloading the log from manifold if it\'s not found locally\n\n        --omit-empty-std-err\n            Omit commands if their std_err is empty\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --show-std-err\n            Show also std_err from commands that are run. If the command fails before completing, we\n            display "<command did not finish executing>". If it finishes but there is no error, we\n            display "<stderr is empty>". Otherwise, std_err is shown. For JSON, we show raw values\n            and null for non-completion\n\n        --skip-cache-hits\n            \n\n        --skip-local-executions\n            \n\n        --skip-remote-executions\n            \n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            "-v=1,stderr"\n            \n            [default: 1]\n\n')),(0,a.mdx)("h3",{id:"buck-log-what-up"},"buck log what-up"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-what-up \nShow the spans that were open when the log ended\n\nUSAGE:\n    buck2-release log what-up [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --after <NUMBER>\n            Print the actions that where open after certain amount of milliseconds\n\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")),(0,a.mdx)("h3",{id:"buck-log-what-uploaded"},"buck log what-uploaded"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"buck2-release-log-what-uploaded \nOutputs stats about uploads to RE from the selected invocation\n\nUSAGE:\n    buck2-release log what-uploaded [OPTIONS] [PATH]\n\nARGS:\n    <PATH>\n            A path to an event-log file to read from\n\nOPTIONS:\n        --allow-remote\n            This option does nothing\n\n        --client-metadata <CLIENT_METADATA>\n            Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n            form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n            datasets\n\n        --format <OUTPUT>\n            Which output format to use for this command\n            \n            [default: tabulated]\n            [possible values: tabulated, json, csv]\n\n    -h, --help\n            Print help information\n\n        --no-remote\n            Do not allow downloading the log from manifold if it's not found locally\n\n        --oncall <ONCALL>\n            The oncall executing this command\n\n        --recent <NUMBER>\n            Open the event-log file from a recent command\n\n        --trace-id <ID>\n            Show log by trace id\n\n    -v, --verbose <VERBOSITY>\n            How verbose buck should be while logging.\n            \n            Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3\n            = more info about everything; 4 = more info about everything + stderr;\n            \n            It can be combined with specific log items (stderr, full_failed_command, commands,\n            actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n            \"-v=1,stderr\"\n            \n            [default: 1]\n\n")))}d.isMDXComponent=!0}}]);